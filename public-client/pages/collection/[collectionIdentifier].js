import Container from "@/components/layouts/Container";
import Head from "next/head";
import currencyIcon from "../../images/currency-icon.png";
import Image from "next/image";
import WalletNumber from "@/components/utils/WalletNumber";
import { abbreviateNumber } from "@/lib/utils";
import { IoShuffle } from "react-icons/io5";
import { Button, Input, InputNumber, Modal, message } from "antd";
import { MdOutlineShare } from "react-icons/md";
import CollectionMain from "@/components/collection/CollectionMain";
import axios from "axios";
import { useRouter } from "next/router";
import { ReactComponent as TwitterIcon } from "../../images/profile/tw.svg";
import { ReactComponent as TelegramIcon } from "../../images/telegram.svg";
import telegramLogo from "../../images/profile/telegram-logo.png";
import currency from "../../images/Diamond_Shape.png";
import { useState } from "react";
import BigNumber from "bignumber.js";
import { useSelector } from "react-redux";

const safelyUnwrapAmount = (amount) => {
  const bigAmount = new BigNumber(amount);
  const amountInput = bigAmount.shiftedBy(18); // Atto
  const amountResult = amountInput.toFixed();

  return amountResult;
};

export default function Collection({ collection }) {
  // console.log(collection);
  const router = useRouter();
  const root = useSelector((state) => state.main.root);

  const { collectionIdentifier } = router.query;

  // console.log(collectionIdentifier);

  const [randomBuyModalOpen, setRandomBuyModalOpen] = useState(false);
  const [amountToBuy, setAmountToBuy] = useState(2);

  return (
    <>
      <Head>
        <title>{collection?.title} | Radish Square</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Container>
        <main>
          <section>
            {/* eslint-disable-next-line @next/next/no-img-element */}
            <img
              src={collection?.collectionBanner}
              className="w-full h-[360px] object-cover"
              alt="banner"
            />

            {/* collection Card */}
            <div className="relative -mt-16 xl:px-20 px-4 md:px-6  md:flex justify-between max-w-[1800px] mx-auto">
              <div>
                <div className="flex justify-start">
                  <div className="w-[112px] h-[112px] rounded-full border-4 border-white border-solid flex justify-center items-center">
                    <Image
                      src={collection?.collectionProfilePicture}
                      className="rounded-full"
                      alt="profile"
                      width={108}
                      height={108}
                    />
                  </div>
                </div>
                <div className="max-w-[508px]">
                  <h2 className="font-extrabold text-[40px] mt-2">
                    {collection?.title}
                  </h2>

                  <p className="text-[#94999D] font-bold mt-2">
                    By{" "}
                    <span className="text-primary">
                      @{collection?.creator?.name}
                    </span>
                  </p>

                  <div className="flex items-center gap-x-3 text-sm mt-4">
                    <p>
                      <span className="font-bold">Mint: </span>
                      <span className="text-[#979797] capitalize">
                        {collection?.buyType}
                      </span>
                    </p>

                    <p>
                      <span className="font-bold">Trading: </span>
                      <span className="text-[#979797]">Enabled</span>
                    </p>

                    <p>
                      <span className="font-bold">Total trading fee: </span>
                      <span className="text-[#979797]">10%</span>
                    </p>
                  </div>
                </div>
                <div className="flex items-center gap-x-2 mt-3">
                  <div className="text-sm font-extrabold -mt-[2px]">
                    Collection address:
                  </div>
                  <div>
                    <WalletNumber
                      style="text-sm text-primary font-semibold !m-0 !p-0"
                      walletNumber={collection?.collectionWallet}
                    />
                  </div>
                </div>
                <div className="max-w-[508px] text-[#94999D] mt-3">
                  {collection?.description}
                </div>
                <div className="flex items-center gap-x-8  my-6">
                  <div className="text-left">
                    <p className="font-extrabold text-xl">
                      {abbreviateNumber(collection?.nftCount)}
                    </p>
                    <p className="mt-1 text-sm text-secondaryGray font-bold">
                      items
                    </p>
                  </div>

                  <div className="text-center">
                    <p className="font-extrabold text-xl">
                      {abbreviateNumber(collection?.ownerCount)}
                    </p>
                    <p className="mt-1 text-sm text-secondaryGray font-bold">
                      owners
                    </p>
                  </div>

                  <div className="text-center">
                    <div className="text-center">
                      <div className="inline-flex items-center">
                        <Image
                          src={currencyIcon}
                          width={20}
                          height={20}
                          alt="Currency"
                          className="mr-1"
                        />
                        <span className="font-extrabold">
                          {abbreviateNumber(collection?.floorPrice)} XRD
                        </span>
                      </div>
                    </div>
                    <span className="text-secondaryGray text-sm font-bold mt-1">
                      floor price
                    </span>
                  </div>

                  <div className="text-center">
                    <div className="text-center">
                      <div className="inline-flex items-center">
                        <Image
                          src={currencyIcon}
                          width={20}
                          height={20}
                          alt="Currency"
                          className="mr-1"
                        />
                        <span className="font-extrabold">
                          {abbreviateNumber(collection?.volume)} XRD
                        </span>
                      </div>
                    </div>
                    <span className="text-secondaryGray text-sm font-bold mt-1">
                      volume
                    </span>
                  </div>
                </div>

                <div className="w-full mt-8 flex items-center justify-start gap-x-2">
                  <Button
                    className="flex items-center justify-center  font-extrabold w-[170px] h-[46px] rounded-[12px]"
                    onClick={() => {
                      setRandomBuyModalOpen(true);
                    }}
                  >
                    <IoShuffle className="h-6 w-6 mr-2" />
                    Random Buy
                  </Button>

                  <Button className="w-[46px] h-[46px] rounded-[23px] flex justify-center items-center">
                    <MdOutlineShare className="h-6 w-6" />
                  </Button>
                </div>
              </div>

              {/* <div className="md:mt-28 mt-6">
                <p className="font-extrabold text-sm">
                  Find us on social media
                </p>

                <div className="my-4 flex items-center gap-x-1">
                  {true && (
                    <Image
                      src={telegramLogo}
                      className="cursor-pointer"
                      width={18}
                      height={18}
                      alt="telegram"
                      onClick={() => {
                        window.open(user?.telegram, "_blank");
                      }}
                    />
                  )}
                  {true && (
                    <TwitterIcon
                      className="ml-3 cursor-pointer"
                      onClick={() => {
                        window.open(user?.twitter, "_blank");
                      }}
                    />
                  )}
                </div>
              </div> */}
            </div>
          </section>

          <div className="max-w-[1820px] mx-auto mb-8">
            <CollectionMain
              possibleTraitTypes={collection.possibleTraitTypes}
              collectionIdentifier={collectionIdentifier}
            />
          </div>
        </main>

        {/* random buy modal */}
        <Modal
          open={randomBuyModalOpen}
          centered
          onOk={() => {}}
          onCancel={() => {
            setRandomBuyModalOpen(false);
          }}
          className="!rounded-[16px]"
          style={{ borderRadius: "16px", width: "200px" }}
          footer={null}
          width={400}
        >
          <h2 className="font-extrabold text-[24px] text-center mt-3 mb-3">
            Random Buy
          </h2>
          <div className="h-[1px] w-full bg-[#CFDBD599] my-3"></div>

          <div className="my-6">
            <p className="text-sm text-[#030E1799] dark:text-white">
              Price per nft -{" "}
              <span className="text-primary font-bold">
                {collection.nonMintedNftsCount}
              </span>{" "}
              left
            </p>

            <div className="w-full h-[45px] px-4 rounded-[24px] mt-2 border border-solid border-[#CFDBD599] bg-[#ebf0f080] dark:bg-[#49606066] cursor-not-allowed flex items-center justify-between">
              <span className="font-bold">{collection.floorPrice}</span>
              <div className="text-sm font-extrabold flex items-center gap-x-1">
                <Image src={currency} width={16} height={16} alt="currency" />
                <span>XRD</span>
              </div>
            </div>

            <p className="text-sm text-[#030E1799] dark:text-white mt-4">
              Amount to Buy
            </p>
            <div className="w-full h-[45px] pl-4 pr-3 rounded-[24px] mt-2 border border-solid border-[#CFDBD599] flex items-center justify-between">
              <p className="font-extrabold  w-[80%]">Choose amount</p>
              <InputNumber
                bordered={false}
                min={2}
                max={collection.nonMintedNftsCount}
                size="large"
                value={amountToBuy}
                onChange={(value) => {
                  setAmountToBuy(value);
                }}
                // defaultValue={1}
                style={{
                  borderRadius: "24px",
                }}
                className="w-[20%] h-full pr-1  text-sm !font-extrabold"
              />
            </div>

            <div>
              <p className="text-sm text-[#030E1799] dark:text-white font-extrabold mt-4">
                Notes:
              </p>

              <ul className="px-5 mt-2">
                <li className="text-sm text-[#030E1799] dark:text-white">
                  You will your NFT tokens.
                </li>
                <li className="text-sm text-[#030E1799] dark:text-white ">
                  Our database will update and NFTs will be assigned to your
                  wallet address.
                </li>
              </ul>
            </div>

            <div className="mt-8 flex items-center justify-center gap-x-4">
              <Button
                className="w-[160px] h-[42px] rounded-[12px] font-extrabold"
                onClick={() => {
                  setRandomBuyModalOpen(false);
                }}
              >
                Cancel
              </Button>
              <Button
                type="primary"
                className="w-[160px] h-[42px] rounded-[12px] font-extrabold"
                onClick={async () => {
                  if (!root.actionWallet) {
                    message.error("Please connect your wallet");
                    return;
                  }
                  // if (collection.buyType !== "random") {
                  //   message.error(
                  //     "This collection doesn't have a radom buytype"
                  //   );
                  // }

                  const tx = {
                    actions: [
                      {
                        type: "TransferTokens",
                        from_account: {
                          address: root.actionWallet,
                        },
                        to_account: {
                          address: collection.collectionWallet,
                        },
                        amount: {
                          token_identifier: {
                            rri: collection.collectionRRI || "xrd_rr1qy5wfsfh",
                          },
                          value: safelyUnwrapAmount(
                            collection.floorPrice * amountToBuy
                          ),
                        },
                      },
                    ],
                    message: "random",
                    encryptMessage: false,
                  };
                  if (root.actionWalletType === "z3us") {
                    const response = await window.z3us.v1.submitTransaction(tx);
                    // console.log("wallet response", response);
                  } else if (root.actionWalletType === "xidar") {
                    const response = await window.xidar.v1.submitTransaction(
                      tx
                    );
                  }
                }}
              >
                Buy
              </Button>
            </div>
          </div>
        </Modal>
      </Container>
    </>
  );
}

export async function getServerSideProps(context) {
  const { collectionIdentifier } = context.query;

  try {
    let response = await axios.get(
      `${process.env.API_BASE_URL}/api/collection/${collectionIdentifier}`,
      {}
    );

    return {
      props: {
        collection: response.data?.collection,
      },
    };
  } catch (error) {
    console.log(error);

    return {
      props: {
        collection: null,
      },
    };
  }
}
