import SingleNft from "@/components/common/SingleNft";
import CollectionList from "@/components/explore/CollectionList";
import Container from "@/components/layouts/Container";
import Head from "next/head";
import { useRouter } from "next/router";
import axios from "axios";

export default function Search({ collections = [], nfts = [] }) {
  const router = useRouter();

  return (
    <>
      <Head>
        <title>Search | Radish Square</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container>
        <main className="!max-w-[1800px] mx-auto min-h-[70vh] mb-24 p-4">
          <h2 className="font-extrabold text-[32px] my-10 text-center">
            Showing search result for “{router.query.query}”
          </h2>
          {collections.length === 0 && nfts.length === 0 && (
            <div className="min-h-[40vh] flex items-center justify-center">
              <p className=" text-secondaryDarkGray">No data found</p>
            </div>
          )}
          {collections.length > 0 && (
            <div className="max-w-[1800px] mx-auto xl:px-20 px-4 md:px-6">
              <p className="text-secondaryGray font-bold my-3">
                Collection results
              </p>
              <CollectionList data={collections} />
            </div>
          )}
          {nfts.length > 0 && (
            <div className="xl:px-20 px-4 md:px-6 md:my-10 my-8">
              <p className="text-secondaryGray font-bold my-3">
                Showing {nfts.length} NFTs
              </p>
              <div
                className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 
      gridLaptop:grid-cols-4 gridDesktop:grid-cols-5
     gap-4  mx-auto gridLaptop:mx-0"
              >
                {nfts?.map((nft) => (
                  <SingleNft key={nft._id} nft={nft} />
                ))}
              </div>
            </div>
          )}
        </main>
      </Container>
    </>
  );
}

// fetch data from api-server
export async function getServerSideProps(context) {
  const { query } = context.query;

  // make sure query is not empty or deosn't contain only spaces or / or \ or ?  or % or & or * or ( or ) or + or , or : or ; or = or @ or [ or ]
  if (
    !query ||
    query.trim() === "" ||
    query.includes("/") ||
    query.includes("\\") ||
    query.includes("?") ||
    query.includes("%") ||
    query.includes("&") ||
    query.includes("*") ||
    query.includes("(") ||
    query.includes(")") ||
    query.includes("+") ||
    query.includes(",") ||
    query.includes(":") ||
    query.includes(";") ||
    query.includes("=") ||
    query.includes("@") ||
    query.includes("[") ||
    query.includes("]")
  ) {
    return {
      props: {
        collections: [],
        nfts: [],
      },
    };
  }

  if (query.startsWith("rdx") || query.endsWith(".xrd")) {
    const response = await axios.get(
      `${process.env.API_BASE_URL}/api/user/search/${query}`
    );

    if (response.data?.user) {
      return {
        redirect: {
          destination: `/profile/${response.data.user.uuid}`,
          permanent: false,
        },
      };
    }
  }

  //   console.log("query", query);
  const response = await axios.get(
    `${process.env.API_BASE_URL}/api/index/search/${query}`
  );

  //   console.log(response.data);

  return {
    props: {
      collections: response.data?.collections || [],
      nfts: response.data?.nfts || [],
    },
  };
}
