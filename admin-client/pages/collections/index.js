import Navbar from "@/components/Navbar";
import { Button, Table, message } from "antd";
import { getSession } from "next-auth/react";
import Head from "next/head";
import { useRouter } from "next/router";
import axios from "axios";
import {
  useDeleteCollectionMutation,
  useDeleteCollectionNftsMutation,
} from "@/redux/features/api/apiSlice";

export default function Collections({ collections }) {
  const router = useRouter();
  const [deleteCollection, { isLoading: isDeletingCollection }] =
    useDeleteCollectionMutation();

  const [deleteCollectionNfts, { isLoading: isDeletingCollectionNfts }] =
    useDeleteCollectionNftsMutation();

  const columns = [
    {
      title: "Collection Identifier",
      dataIndex: "collectionIdentifier",
      key: "collectionIdentifier",
      render: (text) => (
        <span
          className="font-bold text-primary cursor-pointer underline"
          onClick={() =>
            router.push(`/collections/nfts?collectionIdentifier=${text}`)
          }
        >
          {text}
        </span>
      ),
    },
    {
      title: "Title",
      dataIndex: "title",
      key: "title",
      render: (text) => <span>{text}</span>,
    },
    {
      title: "Creator",
      dataIndex: "creator",
      key: "creator",
      render: (record) => <span>{record.name + ` ( ${record._id} ) `}</span>,
    },
    {
      title: "Description",
      dataIndex: "description",
      key: "description",
      render: (text) => <span>{text}</span>,
    },
    {
      title: "Type",
      dataIndex: "type",
      key: "type",
      render: (text) => <span>{text}</span>,
    },
    {
      title: "Actions",
      key: "actions",
      render: (text, record) => (
        <span className="flex space-x-2">
          <Button
            type="primary"
            size="small"
            onClick={() =>
              router.push(
                `/collections/edit-collection/${record.collectionIdentifier}`
              )
            }
          >
            Edit
          </Button>
          <Button
            type="default"
            size="small"
            danger
            onClick={() => {
              deleteCollection({
                collectionIdentifier: record.collectionIdentifier,
              }).then((res) => {
                if (res.data?.success) {
                  message.success("Collection deleted successfully");
                }
              });
            }}
            loading={isDeletingCollection}
          >
            Delete
          </Button>
          <Button
            type="default"
            size="small"
            danger
            onClick={() => {
              deleteCollectionNfts({
                collectionIdentifier: record.collectionIdentifier,
              }).then((res) => {
                if (res.data?.success) {
                  message.success("NFTs deleted successfully");
                }
              });
            }}
            loading={isDeletingCollectionNfts}
          >
            Delete NFTs
          </Button>
        </span>
      ),
    },
  ];

  return (
    <>
      <Head>
        <title>Radish Admin / Collections</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar />
      <main>
        <section className="my-6 w-fit mx-auto flex">
          <Button
            type="primary"
            className="mx-auto"
            onClick={() => router.push("/collections/add-collection")}
          >
            Add Collection
          </Button>
          <Button
            type="primary"
            className="mx-auto ml-5"
            onClick={() => router.push("/collections/upload-nfts")}
          >
            Upload Nfts
          </Button>
        </section>
        <section className="mt-8">
          <Table
            columns={columns}
            dataSource={collections}
            pagination={{ pageSize: 10 }}
            rowKey={(record) => record._id}
          />
        </section>
      </main>
    </>
  );
}

export async function getServerSideProps(context) {
  const session = await getSession(context);

  if (!session) {
    return {
      redirect: {
        destination: "/login",
        permanent: false,
      },
    };
  }

  const response = await axios.get(
    `${process.env.API_BASE_URL}/api/collection/get-collections`
  );

  // console.log(response.data);

  return {
    props: {
      session,
      collections: response.data.collections,
    },
  };
}
