import Navbar from "@/components/Navbar";
import { Button, Checkbox, Table, message } from "antd";
import { getSession } from "next-auth/react";
import Head from "next/head";
import { useRouter } from "next/router";
import axios from "axios";
import Image from "next/image";
import { useMarkAsEditorsPickMutation } from "@/redux/features/api/apiSlice";
import { Input } from "antd";
import { useState } from "react";

export default function Collections({ nfts }) {
  const router = useRouter();
  const [markAsEditorsPick] = useMarkAsEditorsPickMutation();
  const [renderedNfts, setRenderedNfts] = useState(nfts);
  const [searchLoading, setSearchLoading] = useState(false);

  const columns = [
    {
      title: "Reference Id",
      dataIndex: "referenceId",
      key: "referenceId",
      render: (text) => <span className="font-bold text-primary">{text}</span>,
    },
    {
      title: "Picture",
      dataIndex: "picture",
      key: "picture",
      render: (url) => (
        <div>
          <Image
            height={50}
            width={50}
            className="object-contain"
            src={url}
            alt={url}
          />
        </div>
      ),
    },
    {
      title: "Title",
      dataIndex: "title",
      key: "title",
      render: (text) => <span>{text}</span>,
    },
    {
      title: "Description",
      dataIndex: "description",
      key: "description",
      render: (text) => <span>{text}</span>,
    },
    {
      title: "Owner Wallet",
      dataIndex: "ownerWallet",
      key: "ownerWallet",
      render: (text) => <span>{text}</span>,
    },
    {
      title: "Price",
      dataIndex: "price",
      key: "price",
      render: (text) => <span>{text}</span>,
    },
    {
      title: "Currency",
      dataIndex: "currency",
      key: "currency",
      render: (text) => <span>{text}</span>,
    },
    {
      title: "For Sale",
      dataIndex: "forSale",
      key: "forSale",
      render: (value) => <Checkbox checked={value} />,
    },
    {
      title: "On Auction",
      dataIndex: "onAuction",
      key: "onAuction",
      render: (value) => <Checkbox checked={value} />,
    },
    {
      title: "Actions",
      key: "actions",
      render: (text, record) => (
        <span className="flex space-x-2">
          <Button
            type="dashed"
            size="small"
            onClick={() => router.push(`/collections/edit-nft/${record._id}`)}
          >
            Edit
          </Button>
          <Button
            size="small"
            type="primary"
            onClick={() => {
              markAsEditorsPick({
                nftId: record._id,
              }).then((res) => {
                message.success(
                  record.isEditorsPick
                    ? "Removed from Editors Pick"
                    : "Added to Editors Pick"
                );
                router.reload();
              });
            }}
          >
            {record.isEditorsPick
              ? "Remove from Editors Pick"
              : "Add to Editors Pick"}
          </Button>
          <Button type="default" size="small" danger>
            Delete
          </Button>
        </span>
      ),
    },
  ];

  return (
    <>
      <Head>
        <title>Radish Admin / Nfts</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar />
      <main>
        <section className="my-6">
          <h2 className="text-xl font-bold text-center">
            NFTs in{" "}
            <span className="text-primary">
              "{router.query.collectionIdentifier}"
            </span>{" "}
            collection
          </h2>
        </section>
        <section className="my-4 max-w-[500px] flex items-center justify-between mx-auto">
          <Input.Search
            placeholder="Search in the collection"
            loading={searchLoading}
            onSearch={async (txt) => {
              // alert(txt);
              setSearchLoading(true);

              const response = await axios.post(
                `${process.env.NEXT_PUBLIC_API_BASE_URL}/api/collection/search-in-collection/${router.query.collectionIdentifier}`,
                {
                  collectionIdentifier: router.query.collectionIdentifier,
                  searchText: txt,
                }
              );

              setRenderedNfts(response.data.nfts);
              setSearchLoading(false);
            }}
          />
        </section>
        <section className="mt-8 px-6">
          <Table
            columns={columns}
            dataSource={renderedNfts}
            pagination={{ pageSize: 10 }}
            rowKey={(record) => record._id}
          />
        </section>
      </main>
    </>
  );
}

export async function getServerSideProps(context) {
  const session = await getSession(context);
  const { collectionIdentifier } = context.query;

  if (!session) {
    return {
      redirect: {
        destination: "/login",
        permanent: false,
      },
    };
  }

  const response = await axios.get(
    `${process.env.API_BASE_URL}/api/nft/fetch-nfts/${collectionIdentifier}`
  );

  //   console.log(response.data);

  return {
    props: {
      session,
      nfts: response.data.nfts?.slice(0, 10),
    },
  };
}
